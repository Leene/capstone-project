{"version":3,"sources":["constants.js","components/GameInterface.js","components/TextArea.js","components/GameOverDialog.js","components/WinnerDialog.js","components/Keyboard.js","components/GameArea.js","components/CreateOrder.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["COLORS","life","GameInterface","props","hint","scoreState","useState","showText","setShowText","Score","Hint","HintButton","title","onClick","HintTextDiv","HintText","Life","amount","rows","i","push","LifeIcon","alt","src","key","Lifecon","styled","div","p","button","img","TextArea","amountOfQuestions","inputText","setInputText","setScoreState","setFeedback","setLife","setVisible","orderNum","setOrderNum","setWinnerDialog","Textarea","BTN","GameOverDialog","toShow","visible","content","Header","HeadLogo","H2","P","BTNdiv","to","InsetShadow","hidden","Wrap","header","DIV","winnerDialog","console","log","Keyboard","order","btnTextArray","exercises","btntext","handleClick","symbol","KeysSide","signs","slice","map","KeysSideDiv","KeysMiddle","middleSide","KeysMiddleDiv","renderMiddleKeys","GameArea","feedback","emmet","newText","result","split","item","Gamefield","Boxarea","feedbackText","Feedback","length","Box","Textbox","Gameinterface","KeyboardStyle","section","Home","Main","LOGO","Text","URLBtn","href","target","rel","a","App","LinkStyled","NavButton","path","main","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f639df3.chunk.js","sourcesContent":["export const COLORS = {\r\n    text: 'black',\r\n    hintfield: '184, 190, 178',\r\n    middleviolet: '109, 104, 130',\r\n    code: '152, 236, 255',\r\n    boxtext: '152, 236, 255',\r\n    light: '255, 255, 255',\r\n    lightText: '255, 255, 255',\r\n    primary: '0, 0, 0',\r\n    secondary: '147, 186, 163',\r\n    shadow: '58, 32, 10',\r\n    shadow_RGBA: 'rgba(58, 32, 10, 0.2)',\r\n    violet: '27, 24, 87',\r\n    violet_RGB: 'rgb(27, 24, 87)',\r\n    background1: 'rgb(147, 186, 163)',\r\n    background2: 'rgb(205, 151, 151)',\r\n    background1_NUM: '147, 186, 163',\r\n    background2_NUM: '205, 151, 151' /* rosa*/\r\n  }\r\n\r\n  ","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../constants'\r\n\r\nconst life = 'https://img.icons8.com/material/20/000000/hearts--v1.png'\r\n\r\nexport default function GameInterface(props) {\r\n    const { hint, scoreState, life } = props\r\n    const [showText, setShowText] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <Score>\r\n                <p>{scoreState}</p>\r\n            </Score>\r\n            <Hint>\r\n                <HintButton\r\n                    title=\"Lösung ein-/ausblenden\"\r\n                    onClick={() => setShowText(!showText)}\r\n                >\r\n                    HINT\r\n                </HintButton>\r\n                <HintTextDiv>\r\n                    {showText && <HintText>{hint}</HintText>}\r\n                </HintTextDiv>\r\n            </Hint>\r\n            <Life>{Lifecon(life)}</Life>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Lifecon(amount) {\r\n    const rows = []\r\n    for (var i = 0; i < amount; i++) {\r\n        rows.push(<LifeIcon alt=\"\" src={life} key={i} />)\r\n    }\r\n    return <>{rows}</>\r\n}\r\n\r\nconst HintTextDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 75%;\r\n    height: 100%;\r\n    background-color: rgb(${COLORS.hintfield});\r\n    border-radius: 0 20px 20px 0;\r\n    box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n`\r\n\r\nconst HintText = styled.p`\r\n    color: rgb(${COLORS.light});\r\n    font-size: 80%;\r\n    margin: 0;\r\n    padding: 0;\r\n`\r\n\r\nconst HintButton = styled.button`\r\n    cursor: pointer;\r\n    color: rgba(${COLORS.light}, 0.7);\r\n    font-size: 0.6em;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n    width: 20%;\r\n    height: 100%;\r\n    background-color: rgb(${COLORS.middleviolet});\r\n    border: none;\r\n    border-radius: 20px 0 0 20px;\r\n    box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n    &:hover {\r\n        background-color: rgb(${COLORS.background1_NUM});\r\n    }\r\n    &:active {\r\n        color: #f2fcfd;\r\n        background: linear-gradient(\r\n            45deg,\r\n            rgb(75, 192, 215) 100%,\r\n            rgb(220, 236, 255) 10%\r\n        );\r\n        box-shadow: 2px 2px 5px 6px rgba(58, 32, 10, 0.2);\r\n    }\r\n`\r\n\r\nconst Score = styled.div`\r\n    grid-area: score;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.1em;\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    color: ${COLORS.text};\r\n    min-width: 3em;\r\n    height: 30px;\r\n`\r\nconst Hint = styled.div`\r\n    grid-area: middle;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 1.1em;\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    color: ${COLORS.light};\r\n    min-width: 4em;\r\n    height: 30px;\r\n`\r\n\r\nconst Life = styled.div`\r\n    grid-area: life;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: bold;\r\n    min-width: 4em;\r\n    height: 30px;\r\n`\r\n\r\nconst LifeIcon = styled.img`\r\n    padding: 2px;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../constants'\r\n\r\nexport default function TextArea(props) {\r\n    const {\r\n        amountOfQuestions,\r\n        hint,\r\n        inputText,\r\n        setInputText,\r\n        setScoreState,\r\n        scoreState,\r\n        setFeedback,\r\n        life,\r\n        setLife,\r\n        setVisible,\r\n        orderNum,\r\n        setOrderNum,\r\n        setWinnerDialog,\r\n    } = props\r\n\r\n    const btnDeleteText = 'X'\r\n    const btnInputText = 'OK'\r\n\r\n    const handleOKBtnClick = () => {\r\n        if (inputText === hint) {\r\n            setScoreState(scoreState + 10)\r\n            setFeedback('Richtig :-D')\r\n            setInputText('Welcher Emmet-Befehl passt?')\r\n            if (orderNum < amountOfQuestions - 1) {\r\n                // -1 da es hier dem höchsten Indexwert von Array \"order\" entsprechen muss und Indizes bei 0 starten // Refactor\r\n                setOrderNum(orderNum + 1)\r\n            } else {\r\n                setFeedback('Super, alle Fragen richtig gelöst!')\r\n                setWinnerDialog(true)\r\n            }\r\n        } else {\r\n            setFeedback('Falsch :-(')\r\n            setLife(life - 1)\r\n            setInputText('Welcher Emmet-Befehl passt?')\r\n\r\n            if (life <= 1) {\r\n                setFeedback('Game Over')\r\n                setVisible(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDeleteBtnClick = () => {\r\n        setInputText('Deine neue Eingabe ...')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Textarea>{inputText}</Textarea>\r\n            <BTN title=\"Eingabe löschen\" onClick={handleDeleteBtnClick}>\r\n                {btnDeleteText}\r\n            </BTN>\r\n            <BTN title=\"Eingabe bestätigen\" onClick={handleOKBtnClick}>\r\n                {btnInputText}\r\n            </BTN>\r\n        </>\r\n    )\r\n}\r\n\r\nexport function Feedback(feedbackText) {\r\n    const Wrap = styled.div`\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 30px;\r\n        margin-bottom: 5px;\r\n    `\r\n    const DIV = styled.div`\r\n        color: rgb(${COLORS.light});\r\n        font-size: 0.8em;\r\n        font-weight: bold;\r\n        background-color: rgba(${COLORS.light}, 0.2);\r\n        width: 50%;\r\n        border-radius: 20px;\r\n        margin: 20px;\r\n    `\r\n    return (\r\n        <Wrap>\r\n            <DIV>{feedbackText}</DIV>\r\n        </Wrap>\r\n    )\r\n}\r\n\r\nconst Textarea = styled.div`\r\n    contenteditable: true;\r\n    overflow-wrap: break-word;\r\n    color: white;\r\n    font-weight: bold;\r\n    box-shadow: inset 2px 2px 3px 2px rgba(${COLORS.shadow}, 0.2);\r\n    background-color: #393c8060;\r\n    padding: 10px;\r\n    margin-top: 8px;\r\n`\r\nconst BTN = styled.button`\r\n    cursor: pointer;\r\n    color: rgb(${COLORS.lightText});\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    background-color: rgba(${COLORS.violet}, 0.5);\r\n    border: none;\r\n    border-radius: 20px;\r\n    box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n    min-width: 60px;\r\n    margin: 20px 20px 0;\r\n    padding: 10px;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.background1_NUM});\r\n    }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from '@reach/router'\r\nimport { COLORS } from '../constants'\r\n\r\nexport default function GameOverDialog(props) {\r\n    const {\r\n        visible,\r\n        setVisible,\r\n        setLife,\r\n        setScoreState,\r\n        setFeedback,\r\n        setOrderNum,\r\n    } = props\r\n\r\n    const handleNoBtnClick = () => {\r\n        setVisible(false) // GameOverdialog ausblenden, to refactor\r\n        setLife(3)\r\n        setScoreState(0)\r\n        setFeedback('')\r\n        setOrderNum(0)\r\n    }\r\n\r\n    const content = (\r\n        <Wrap>\r\n            <Header>\r\n                <HeadLogo\r\n                    alt=\"sad cloud\"\r\n                    src=\"https://img.icons8.com/dotty/80/000000/sad-cloud.png\"\r\n                />\r\n            </Header>\r\n            <H2>Ohje, leider verloren :-(</H2>\r\n            <P>Spiel beenden oder nochmal spielen?</P>\r\n            <BTNdiv>\r\n                <Link to=\"/\">\r\n                    <BTN title=\"Zurück zum Startbereich\">Beenden</BTN>\r\n                </Link>\r\n                <Link to=\"/gamearea\">\r\n                    <BTN title=\"Startet neues Spiel\" onClick={handleNoBtnClick}>\r\n                        Nochmal\r\n                    </BTN>\r\n                </Link>\r\n            </BTNdiv>\r\n        </Wrap>\r\n    )\r\n\r\n    let toShow\r\n\r\n    if (visible) {\r\n        toShow = (\r\n            <DIV>\r\n                <InsetShadow>{content}</InsetShadow>\r\n            </DIV>\r\n        )\r\n    } else {\r\n        toShow = (\r\n            <DIV hidden>\r\n                <InsetShadow>{content}</InsetShadow>\r\n            </DIV>\r\n        )\r\n    }\r\n\r\n    return <>{toShow}</>\r\n}\r\n\r\nconst BTNdiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nconst H2 = styled.div`\r\n    font-size: 1.2em;\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n`\r\n\r\nconst P = styled.div`\r\n    font-size: 0.8em;\r\n`\r\n\r\nconst BTN = styled.button`\r\n    background-color: rgba(${COLORS.violet}, 0.5);\r\n    color: rgb(${COLORS.lightText});\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    cursor: pointer;\r\n    min-width: 60px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n    margin: 20px 20px 0;\r\n    padding: 10px;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.background1_NUM});\r\n    }\r\n`\r\n\r\nconst Wrap = styled.div`\r\n    width: 70vw;\r\n`\r\nconst Header = styled.header`\r\n    margin-top: 30px;\r\n`\r\nconst HeadLogo = styled.img`\r\n    opacity: 1;\r\n    height: 80px;\r\n    padding: 2px;\r\n`\r\nconst InsetShadow = styled.div`\r\n    position: absolute;\r\n    height: 100%;\r\n    box-shadow: inset 1px 1px 2px 0px rgba(${COLORS.light}, 0.8);\r\n`\r\n\r\nconst DIV = styled.div`\r\n    position: absolute;\r\n    opacity: 1;\r\n    background-color: rgb(${COLORS.hintfield});\r\n    border-width: 2px;\r\n    border-style: solid;\r\n    border-image: linear-gradient(\r\n            to bottom,\r\n            rgba(${COLORS.light}, 0) 1%,\r\n            rgba(${COLORS.light}, 0.8) 10%,\r\n            rgba(${COLORS.light}, 0) 100%\r\n        )\r\n        1 100%;\r\n    box-shadow: 2px 2px 5px 3px ${COLORS.shadow_RGBA};\r\n    width: 70vw;\r\n    height: 47vh;\r\n    margin-top: 10vh;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from '@reach/router'\r\nimport { COLORS } from '../constants'\r\n\r\nexport default function GameOverDialog(props) {\r\n    const {\r\n        winnerDialog,\r\n        setWinnerDialog,\r\n        setLife,\r\n        setScoreState,\r\n        setFeedback,\r\n        setOrderNum,\r\n    } = props\r\n    const handleNoBtnClick = () => {\r\n        console.log('NO geklickt')\r\n        setWinnerDialog(false)\r\n        setLife(3)\r\n        setScoreState(0)\r\n        setFeedback('')\r\n        setOrderNum(0)\r\n    }\r\n\r\n    const content = (\r\n        <Wrap>\r\n            <Header>\r\n                <HeadLogo\r\n                    alt=\"trophy\"\r\n                    src=\"https://img.icons8.com/dotty/80/000000/trophy.png\"\r\n                />\r\n            </Header>\r\n            <H2>Wow, geiler Typ!</H2>\r\n            <P>Du hast ALLE Fragen richtig beantwortet!</P>\r\n\r\n            <P>Spiel beenden oder nochmal spielen?</P>\r\n            {/*  <button onClick={handleNoBtnClick}>Nein, nochmal Spielen</button></> */}\r\n            <BTNdiv>\r\n                <Link to=\"/\">\r\n                    <BTN title=\"Zurück zum Startbereich\">Beenden</BTN>\r\n                </Link>\r\n                <Link to=\"/gamearea\">\r\n                    <BTN title=\"Startet neues Spiel\" onClick={handleNoBtnClick}>\r\n                        Nochmal\r\n                    </BTN>\r\n                </Link>\r\n            </BTNdiv>\r\n        </Wrap>\r\n    )\r\n\r\n    let toShow\r\n\r\n    if (winnerDialog) {\r\n        toShow = (\r\n            <DIV>\r\n                <InsetShadow>{content}</InsetShadow>\r\n            </DIV>\r\n        )\r\n    } else {\r\n        toShow = (\r\n            <DIV hidden>\r\n                <InsetShadow>{content}</InsetShadow>\r\n            </DIV>\r\n        )\r\n    }\r\n    return <>{toShow}</>\r\n}\r\n\r\nconst BTNdiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nconst H2 = styled.div`\r\n    font-size: 1.2em;\r\n    font-weight: bold;\r\n    margin-bottom: 10px;\r\n`\r\nconst P = styled.div`\r\n    font-size: 0.8em;\r\n`\r\n\r\nconst BTN = styled.button`\r\n    cursor: pointer;\r\n    color: rgb(${COLORS.lightText});\r\n    font-weight: bold;\r\n    letter-spacing: 1px;\r\n    background-color: rgba(${COLORS.violet}, 0.5);\r\n    box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n    min-width: 60px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    margin: 20px 20px 0;\r\n    padding: 10px;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.background1_NUM});\r\n    }\r\n`\r\n\r\nconst Wrap = styled.div`\r\n    width: 70vw;\r\n`\r\nconst Header = styled.header`\r\n    margin-top: 30px;\r\n`\r\nconst HeadLogo = styled.img`\r\n    opacity: 1;\r\n    height: 80px;\r\n    padding: 2px;\r\n`\r\nconst InsetShadow = styled.div`\r\n    position: absolute;\r\n    box-shadow: inset 1px 1px 2px 0px rgba(${COLORS.light}, 0.8);\r\n    height: 100%;\r\n`\r\n\r\nconst DIV = styled.div`\r\n    position: absolute;\r\n    opacity: 1;\r\n    border-style: solid;\r\n    border-width: 2px;\r\n    border-image: linear-gradient(\r\n            to bottom,\r\n            rgba(${COLORS.light}, 0) 1%,\r\n            rgba(${COLORS.light}, 0.8) 10%,\r\n            rgba(${COLORS.light}, 0) 100%\r\n        )\r\n        1 100%;\r\n    box-shadow: 2px 2px 5px 3px ${COLORS.shadow_RGBA};\r\n    width: 70vw;\r\n    height: 47vh;\r\n    background-color: rgb(${COLORS.hintfield});\r\n    margin-top: 10vh;\r\n`\r\n","import React from 'react'\r\nimport '../css/Style.css'\r\nimport { signs } from '../data/keyboard_symbols.json'\r\nimport { exercises } from '../data/exercises.json'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../constants'\r\n\r\nexport default function Keyboard(props) {\r\n    const { inputText, setInputText, order, orderNum } = props\r\n\r\n    function renderLeftKeys() {\r\n        const leftSide = signs.slice(0, 12)\r\n\r\n        return leftSide.map((key) => (\r\n            <KeysSideDiv\r\n                onClick={() => handleClick(key.symbol)}\r\n                key={key.symbol}\r\n            >\r\n                {key.symbol}\r\n            </KeysSideDiv>\r\n        ))\r\n    }\r\n    function renderRightKeys() {\r\n        const rightSide = signs.slice(12, 24)\r\n        return rightSide.map((key) => (\r\n            <KeysSideDiv\r\n                onClick={() => handleClick(key.symbol)}\r\n                key={key.symbol}\r\n            >\r\n                {key.symbol}\r\n            </KeysSideDiv>\r\n        ))\r\n    }\r\n\r\n    let btnTextArray = exercises[4].btntext\r\n    console.log('btnTextArray' + btnTextArray)\r\n\r\n    function renderMiddleKeys() {\r\n        console.log('exercises: ' + exercises[4].btntext)\r\n\r\n        const middleSide = exercises[order[orderNum]].btntext\r\n        console.log('middleSide: ' + middleSide)\r\n\r\n        return middleSide.map((key) => (\r\n            <KeysMiddleDiv onClick={() => handleClick(key)} key={key}>\r\n                {key}\r\n            </KeysMiddleDiv>\r\n        ))\r\n    }\r\n\r\n    const handleClick = (symbol) => {\r\n        if (inputText === 'Welcher Emmet-Befehl passt?') {\r\n            setInputText(' ')\r\n            setInputText(symbol)\r\n        } else if (inputText === 'Deine neue Eingabe ...') {\r\n            setInputText(' ')\r\n            setInputText(symbol)\r\n        } else {\r\n            setInputText(inputText + symbol)\r\n        }\r\n        console.log('clicked')\r\n    }\r\n    return (\r\n        <>\r\n            <KeysSide>{renderLeftKeys()}</KeysSide>\r\n            <KeysMiddle>{renderMiddleKeys()}</KeysMiddle>\r\n            <KeysSide>{renderRightKeys()}</KeysSide>\r\n        </>\r\n    )\r\n}\r\nexport const typedText = []\r\nexport function clickedKey(symbol) {\r\n    typedText.push(symbol)\r\n    console.log('symbol: ' + symbol + 'typedText: ')\r\n    console.log(typedText)\r\n}\r\n\r\nexport function getTypedText() {\r\n    console.log('getTypedText: ' + typedText)\r\n    return typedText\r\n}\r\n\r\nconst KeysSide = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    font-weight: bold;\r\n    font-size: 1.5em;\r\n    text-shadow: 2px 2px 2px rgba(255, 255, 255, 0.5);\r\n    width: 35vw;\r\n    height: 35vh;\r\n`\r\n\r\nconst KeysSideDiv = styled.button`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    width: 30%;\r\n    height: 25%;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.violet});\r\n    }\r\n    &:active {\r\n        color: ${COLORS.lightText};\r\n        background: linear-gradient(\r\n            45deg,\r\n            rgb(75, 192, 215) 100%,\r\n            rgb(220, 236, 255) 10%\r\n        );\r\n        box-shadow: 2px 2px 5px 6px rgba(58, 32, 10, 0.2);\r\n    }\r\n`\r\n\r\nconst KeysMiddle = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: scroll;\r\n    overscroll-behavior: none;\r\n    scrollbar-width: thin;\r\n    scrollbar-color: rgba(${COLORS.primary}, 0.2)\r\n        rgba(${COLORS.background1_NUM}, 0);\r\n    width: 33%;\r\n    height: 35vh;\r\n`\r\n\r\nconst KeysMiddleDiv = styled.button`\r\n    height: 25%;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.violet});\r\n    }\r\n    &:active {\r\n        color: #f2fcfd;\r\n        background: linear-gradient(\r\n            45deg,\r\n            rgb(75, 192, 215) 100%,\r\n            rgb(220, 236, 255) 10%\r\n        );\r\n        box-shadow: 2px 2px 5px 6px rgba(58, 32, 10, 0.2);\r\n    }\r\n`\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../constants'\r\nimport GameInterface from './GameInterface'\r\nimport { exercises } from '../data/exercises.json'\r\nimport TextArea, { Feedback } from './TextArea'\r\nimport GameOverDialog from './GameOverDialog'\r\nimport WinnerDialog from './WinnerDialog'\r\nimport CreateOrder from './CreateOrder'\r\nimport Keyboard from './Keyboard'\r\n\r\nexport default function GameArea() {\r\n    let order = CreateOrder()\r\n    const [inputText, setInputText] = useState('Welcher Emmet-Befehl passt?')\r\n    const [scoreState, setScoreState] = useState(0)\r\n    const [feedback, setFeedback] = useState(' ')\r\n    const [life, setLife] = useState(3)\r\n    const [visible, setVisible] = useState(false)\r\n    const [winnerDialog, setWinnerDialog] = useState(false)\r\n    const [orderNum, setOrderNum] = useState(0)\r\n    let hint = exercises[order[orderNum]].emmet\r\n\r\n    const newText = exercises[order[orderNum]].result\r\n        .split('\\n')\r\n        .map((item, i) => {\r\n            return (\r\n                <span key={i}>\r\n                    {item}\r\n                    <br />\r\n                </span>\r\n            )\r\n        })\r\n\r\n    return (\r\n        <Gamefield>\r\n            <Header>\r\n                <HeadLogo\r\n                    alt=\"logo\"\r\n                    src=\"../img/EmmetGame_Headlogo_Schatten.png\"\r\n                />\r\n            </Header>\r\n            <WinnerDialog\r\n                winnerDialog={winnerDialog}\r\n                setWinnerDialog={setWinnerDialog}\r\n                setLife={setLife}\r\n                setScoreState={setScoreState}\r\n                setFeedback={setFeedback}\r\n                setOrderNum={setOrderNum}\r\n            />\r\n            <GameOverDialog\r\n                visible={visible}\r\n                setVisible={setVisible}\r\n                setLife={setLife}\r\n                setScoreState={setScoreState}\r\n                setFeedback={setFeedback}\r\n                setOrderNum={setOrderNum}\r\n            />\r\n            <Boxarea>\r\n                <div>{Feedback(feedback)}</div>\r\n                <DIV>\r\n                    <p>\r\n                        {orderNum + 1} / {exercises.length}\r\n                    </p>\r\n                </DIV>\r\n                <InsetShadow>\r\n                    <Box>\r\n                        <Textbox>\r\n                            <code>{newText}</code>\r\n                        </Textbox>\r\n                        <TextArea\r\n                            amountOfQuestions={exercises.length}\r\n                            hint={hint}\r\n                            inputText={inputText}\r\n                            setInputText={setInputText}\r\n                            scoreState={scoreState}\r\n                            setScoreState={setScoreState}\r\n                            setFeedback={setFeedback}\r\n                            setLife={setLife}\r\n                            life={life}\r\n                            setVisible={setVisible}\r\n                            orderNum={orderNum}\r\n                            setOrderNum={setOrderNum}\r\n                            setWinnerDialog={setWinnerDialog}\r\n                        />\r\n                        {/* {TextArea(getTypedText(), inputText, setInputText, hint)} */}\r\n                    </Box>\r\n                </InsetShadow>\r\n            </Boxarea>\r\n            <Gameinterface>\r\n                <GameInterface\r\n                    hint={hint}\r\n                    scoreState={scoreState}\r\n                    life={life}\r\n                />\r\n                <KeyboardStyle>\r\n                    <Keyboard\r\n                        inputText={inputText}\r\n                        setInputText={setInputText}\r\n                        order={order}\r\n                        orderNum={orderNum}\r\n                    />\r\n                </KeyboardStyle>\r\n            </Gameinterface>\r\n        </Gamefield>\r\n    )\r\n}\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    justify-content: center;\r\n    position: fixed;\r\n`\r\nconst HeadLogo = styled.img`\r\n    height: 30px;\r\n    opacity: 1;\r\n    padding: 2px;\r\n`\r\n\r\nconst Gamefield = styled.section`\r\n    display: flex;\r\n    justify-content: center;\r\n    text-align: center;\r\n    height: 90vh;\r\n    margin-top: -40px;\r\n`\r\n\r\nconst Boxarea = styled.div`\r\n    width: auto;\r\n    height: auto;\r\n    margin-top: 10vh;\r\n`\r\nconst DIV = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    & p {\r\n        color: rgb(${COLORS.light});\r\n        font-size: 0.5em;\r\n    }\r\n    margin-top: -4vh;\r\n`\r\n\r\nconst Box = styled.div`\r\n    background-color: rgba(${COLORS.light}, 0.2);\r\n    padding: 10px;\r\n    border-style: solid;\r\n    border-width: 2px;\r\n    border-image: linear-gradient(\r\n            to bottom,\r\n            rgba(${COLORS.light}, 0) 1%,\r\n            rgba(${COLORS.light}, 0.8) 10%,\r\n            rgba(${COLORS.light}, 0) 100%\r\n        )\r\n        1 100%;\r\n    width: 80vw;\r\n    height: auto;\r\n    box-shadow: 1px 1px 8px 3px ${COLORS.shadow_RGBA};\r\n`\r\nconst InsetShadow = styled.div`\r\n    box-shadow: inset 1px 1px 2px 0px rgba(${COLORS.light}, 0.8);\r\n`\r\nconst Textbox = styled.div`\r\n    color: rgb(${COLORS.code});\r\n    scrollbar-width: thin;\r\n    scrollbar-color: rgba(${COLORS.primary}, 0.3) rgba(${COLORS.primary}, 0);\r\n    background-color: rgba(${COLORS.violet}, 0.7);\r\n    padding: 10px 3px;\r\n    height: 20vh;\r\n    overflow: scroll;\r\n    overscroll-behavior: none;\r\n`\r\n\r\nconst Gameinterface = styled.div`\r\n    display: grid;\r\n    grid-template-areas:\r\n        'score middle life'\r\n        'keyboard keyboard keyboard';\r\n    grid-template-rows: 1fr 5fr;\r\n    grid-template-columns: 1fr 6fr 1fr;\r\n    position: fixed;\r\n    bottom: 0px;\r\n    width: 100vw;\r\n`\r\n\r\nconst KeyboardStyle = styled.section`\r\n    grid-area: keyboard;\r\n    display: flex;\r\n    user-select: none;\r\n    font-size: calc(10px + 2vmin);\r\n    width: 100vw;\r\n    margin-top: -1vh;\r\n    /* offset-x | offset-y | blur-radius | spread-radius | color */\r\n    box-shadow: 2px 2px 5px 6px ${COLORS.shadow_RGBA};\r\n\r\n    & button {\r\n        color: ${COLORS.text};\r\n        text-shadow: 2px 2px 2px rgba(255, 255, 255, 0.5);\r\n        font-weight: bold;\r\n        font-size: 1.3em;\r\n        border: none;\r\n        margin: 1px;\r\n        background: linear-gradient(\r\n            135deg,\r\n            rgba(${COLORS.background2_NUM}, 0.5) 1%,\r\n            rgba(${COLORS.light}, 0.4) 35%,\r\n            rgb(${COLORS.background1_NUM}, 1) 100%\r\n        );\r\n    }\r\n`\r\n","export default function CreateOrder() {\r\n    let order = [\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        12,\r\n        13,\r\n        14,\r\n        15,\r\n        16,\r\n        17,\r\n        18,\r\n        19,\r\n        20,\r\n        21,\r\n    ]\r\n    return order\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from '../constants'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <Main>\r\n            <LOGO\r\n                alt=\"logo\"\r\n                src=\"../img/EmmetGame_Frontlogo_Schatten.png\"\r\n            />\r\n            <Text>\r\n                Erlerne Emmet-Befehle spielerisch! <br />\r\n                Drücke oben rechts den Start-Button.\r\n                <br />\r\n                Viel Spaß! :-D\r\n            </Text>\r\n            <URLBtn\r\n                title=\"Externer Link zur offiziellen Auflistung der Emmet-Befehle\"\r\n                href=\"https://docs.emmet.io/cheat-sheet/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                Emmet-Befehle\r\n            </URLBtn>\r\n            <Text>\r\n                <small>(Zum offiziellen Cheat-Sheet der Emmet-Befehle)</small>\r\n            </Text>\r\n        </Main>\r\n    )\r\n}\r\n\r\nconst Main = styled.section`\r\n    text-align: center;\r\n`\r\nconst LOGO = styled.img`\r\n    text-align: center;\r\n    width: 50vw;\r\n    max-width: 300px;\r\n    margin: 10vh 0 0 0;\r\n`\r\n\r\nconst URLBtn = styled.a`\r\n    background-color: rgb(${COLORS.primary});\r\n    color: rgb(${COLORS.lightText});\r\n    text-decoration: none;\r\n    letter-spacing: 1px;\r\n    box-shadow: 1px 2px 3px 3px rgba(58, 32, 10, 0.2);\r\n    padding: 10px;\r\n    &:hover {\r\n        background-color: rgb(${COLORS.middleviolet});\r\n    }\r\n`\r\n\r\nconst Text = styled.p`\r\n    font-size: 1em;\r\n    margin-bottom: 10em;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { COLORS } from './constants'\r\nimport { Router, Link } from '@reach/router'\r\nimport GameArea from './components/GameArea'\r\nimport Home from './components/Home'\r\n\r\nconst home_icon = 'https://img.icons8.com/material-rounded/24/ffffff/home.png'\r\nconst start_icon ='https://img.icons8.com/ios-filled/24/ffffff/circled-play.png'\r\n\r\nexport default function App() {\r\n    return (\r\n        <Main>\r\n            <Header>\r\n                <LinkStyled to=\"/\">\r\n                    <NavButton title=\"Zurück zum Startbereich\">\r\n                        <img alt=\"\" src={home_icon} />\r\n                    </NavButton>\r\n                </LinkStyled>\r\n                <LinkStyled to=\"/gamearea\">\r\n                    <NavButton title=\"Spiel starten\">\r\n                        <img alt=\"\" src={start_icon} />\r\n                    </NavButton>\r\n                </LinkStyled>\r\n            </Header>\r\n            <Router>\r\n                <Home path=\"/\"></Home>\r\n                <GameArea path=\"/gamearea/\"></GameArea>\r\n            </Router>\r\n        </Main>\r\n    )\r\n}\r\n\r\nconst Main = styled.main`\r\n    background: linear-gradient(\r\n        0deg,\r\n        ${COLORS.background1} 9%,\r\n        ${COLORS.background2} 100%\r\n    );\r\n    height: 100vh;\r\n    font-size: calc(10px + 2vmin);\r\n    color: #555;\r\n    overflow: hidden;\r\n`\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\n// \"display: flex;\" bei Link verhindert das Verrutschen der NavButtons beim Ändern der Fenstergröße:\r\nconst LinkStyled = styled(Link)`\r\n    display: flex;\r\n`\r\n\r\nconst NavButton = styled.button`\r\n    background-color: rgba(${COLORS.primary}, 1);\r\n    height: 3em;\r\n    border: none;\r\n    border-radius: 0 0 100px 100px;\r\n    box-shadow: 2px 2px 5px 3px ${COLORS.shadow_RGBA};\r\n    cursor: pointer;\r\n    margin: 0 10px;\r\n    &:hover {\r\n      background-color: rgb(${COLORS.background1_NUM});\r\n  }\r\n`\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}